#!/bin/bash
# INPUT_FILE="../sample_input.csv" # with random 50 sample selected from the original vulnerabilities_input.csv
#Taking input from shuffled file so that collected data don't show any patterns with sample
INPUT_FILE="randomazied_input.csv"
counter_repositories=0

# tail +2, excluding the header line
lib_name_original=( $(tail +2 $INPUT_FILE | cut -d ',' -f1 ) )
lib_id_original=( $(tail +2 $INPUT_FILE | cut -d ',' -f2 ) )
github_link_original=( $(tail +2 $INPUT_FILE | cut -d ',' -f3 ) )

for each_repo_name in "${lib_name_original[@]}"
do   
 auxiliary=$(expr $counter_repositories + 2)
 if [[ "$auxiliary" -ge "$1" ]]
 then
   if [[ "$auxiliary" -le "$2" ]]
   then

     lines_csv_final[0]=lib_name,version,commit_hash,author,commentary,date,link,is_present
     git_repo_without_https="${github_link_original[$counter_repositories]/https:\/\//}"
     echo "Cloning ${git_repo_without_https}"
     # Clone gitHubs repository into folder with the same name as the repo id
     echo "https://meerschweinchenseminar::meerschweinchenseminar1234@""${git_repo_without_https}"
     git clone "https://meerschweinchenseminar::meerschweinchenseminar1234@""${git_repo_without_https}" "${lib_id_original[$counter_repositories]}"

     # We go inside the folder where is the repo cloned
     cd "${lib_id_original[$counter_repositories]}"

     # We download the full log, format: commit_hash, author, commit_commentary, commit_date
     git log --pretty="format:%H,%an,%f,%cI" > "${lib_id_original[$counter_repositories]}".csv

     commit_hash=( $(cut -d ',' -f1 "${lib_id_original[$counter_repositories]}".csv) )
     commit_author=( $(cut -d ',' -f2 "${lib_id_original[$counter_repositories]}".csv) )
     commit_commentary=( $(cut -d ',' -f3 "${lib_id_original[$counter_repositories]}".csv) )
     commit_date=( $(cut -d ',' -f4 "${lib_id_original[$counter_repositories]}".csv) )

     lines_log_counter=1

     for each_commit_hash in "${commit_hash[@]}"
     do	
     
      # To download package.json from each commit 
      git checkout "${each_commit_hash}" "package.json"

      is_version_present=0
  
      if [ -f package.json ]
      then
        mv "package.json" "${each_commit_hash}".json

        # Searching repo version
        while IFS= read -r line
        do
         IFS=':' read -r -a linesPackage <<< "$line"
         myString="${linesPackage[1]}"
         prefix=" \""
         suffix="\","
         foo=${myString#"$prefix"}
         foo=${foo%"$suffix"}
         if [[ "$line" == *"${each_repo_name}\""* ]]
         then 
          lines_csv_final[lines_log_counter]="${each_repo_name}","${foo}","${each_commit_hash}","${commit_author[$lines_log_counter]}","${commit_commentary[$lines_log_counter]}","${commit_date[$lines_log_counter]}","${git_repo_without_https}",YES
          is_version_present=1
         fi
        done < "${each_commit_hash}".json
        rm "${each_commit_hash}".json
        if [ "$is_version_present" = 0 ]
        then
          lines_csv_final[lines_log_counter]="${each_repo_name}",,"${each_commit_hash}","${commit_author[$lines_log_counter]}","${commit_commentary[$lines_log_counter]}","${commit_date[$lines_log_counter]}","${git_repo_without_https}",NO
        fi 
      fi
      ((lines_log_counter++))   
     done

     printf "%s\n" "${lines_csv_final[@]}" > "${lib_id_original[$counter_repositories]}".txt
     mv "${lib_id_original[$counter_repositories]}".txt "${lib_id_original[$counter_repositories]}".csv

     mv "${lib_id_original[$counter_repositories]}".csv ..
     cd ..

     if [ -f "${lib_id_original[$counter_repositories]}".csv ]
     then
       echo "${lib_id_original[$counter_repositories]}" "YES" >> log.txt
     else
       echo "${lib_id_original[$counter_repositories]}" "NO" >> log.txt
     fi

     unset lines_csv_final
     sudo rm -r "${lib_id_original[$counter_repositories]}"
   fi
 fi 
((counter_repositories++))
done
